-- Create the schema (if it doesn't exist)
CREATE SCHEMA IF NOT EXISTS ${SCHEMA_NAME} AUTHORIZATION ${POSTGRES_USER};

-- Set the search path (so subsequent commands operate on the correct schema)
ALTER DATABASE ${POSTGRES_DB} SET search_path TO ${SCHEMA_NAME}, public;

-- Required DDLs
CREATE TABLE IF NOT EXISTS ${SCHEMA_NAME}.USER_DETAILS (
    USERID SERIAL PRIMARY KEY,
    USERNAME VARCHAR(255) UNIQUE NOT NULL,
    FIRSTNAME VARCHAR(255) NOT NULL,
    LASTNAME VARCHAR(255) NOT NULL,
    EMAIL VARCHAR(255) UNIQUE NOT NULL,
    MOBILENO VARCHAR(255) UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS ${SCHEMA_NAME}.USER_CREDENTIALS (
    CREDENTIALID SERIAL PRIMARY KEY,
    USERID INTEGER REFERENCES ${SCHEMA_NAME}.USER_DETAILS(USERID),
    PASSWORDHASH VARCHAR(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS ${SCHEMA_NAME}.ROLE_DETAILS (
    ROLEID SERIAL PRIMARY KEY,
    ROLENAME VARCHAR(255) UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS ${SCHEMA_NAME}.USER_ROLE_MAP (
    USER_ROLEID SERIAL PRIMARY KEY,
    USERID INTEGER REFERENCES ${SCHEMA_NAME}.USER_DETAILS(USERID),
    ROLEID INTEGER REFERENCES ${SCHEMA_NAME}.ROLE_DETAILS(ROLEID),
    UNIQUE (USERID, ROLEID)
);

-- Insert initial data
DO $$
DECLARE
    ratul_user_id INTEGER;
    neo_user_id INTEGER;
    admin_role_id INTEGER;
    user_role_id INTEGER;
BEGIN
    INSERT INTO ${SCHEMA_NAME}.USER_DETAILS (USERNAME, FIRSTNAME, LASTNAME, EMAIL, MOBILENO) VALUES ('ratul2025', 'Ratul', 'De', 'ratultest@domain.com', '9999999999') RETURNING USERID INTO ratul_user_id;
	INSERT INTO ${SCHEMA_NAME}.USER_DETAILS (USERNAME, FIRSTNAME, LASTNAME, EMAIL, MOBILENO) VALUES ('neo2025', 'Keanu', 'Reeves', 'keanutest@domain.com', '9999999998') RETURNING USERID INTO neo_user_id;
	INSERT INTO ${SCHEMA_NAME}.USER_CREDENTIALS (USERID, PASSWORDHASH) VALUES (ratul_user_id,'$2a$12$a5laWeDdvhhhREhwhNpCpu3lak5lhAnSiwpMJ5ecShCVn8U722KK2');
	INSERT INTO ${SCHEMA_NAME}.USER_CREDENTIALS (USERID, PASSWORDHASH) VALUES (neo_user_id,'$2a$12$qbXAuwOHVUnbZ.wUsg1pBOQZrmAqJhk8Lwbgbn1Q2bmQZp7vABjAW');
	INSERT INTO ${SCHEMA_NAME}.ROLE_DETAILS (ROLENAME) VALUES ('admin') RETURNING ROLEID INTO admin_role_id;
	INSERT INTO ${SCHEMA_NAME}.ROLE_DETAILS (ROLENAME) VALUES ('user') RETURNING ROLEID INTO user_role_id;
	INSERT INTO ${SCHEMA_NAME}.USER_ROLE_MAP (USERID, ROLEID) VALUES (ratul_user_id, admin_role_id);
	INSERT INTO ${SCHEMA_NAME}.USER_ROLE_MAP (USERID, ROLEID) VALUES (neo_user_id, user_role_id);
END $$;